---
AWSTemplateFormatVersion: 2010-09-09

Parameters:

 VPCCIDR:
  Description: VPC CIDR
  Type: String
  Default: ''

 PubSubACidr:
  Description: Public Subnet A CIDR.
  Type: String
  Default: ''
 
 PubSubBCidr:
  Description: Public Subnet B CIDR.
  Type: String
  Default: ''

 PriSubACidr:
  Description: Private Subnet A CIDR.
  Type: String
  Default: ''

 PriSubBCidr:
  Description: Private Subnet B CIDR.
  Type: String
  Default: ''
  
Resources:
  ################################Creating VPC and IGW######################################
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
    
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    ##############Creating Public and private subnets#######################################
  PublicSubnetA:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PubSubACidr
      AvailabilityZone: 
        Fn::Select: 
        - 0
        - Fn::GetAZs: ""        
     
  PublicSubnetB:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: !Ref PubSubBCidr
      AvailabilityZone: 
        Fn::Select: 
        - 1
        - Fn::GetAZs: ""        
  
  PrivateSubnetA:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PriSubACidr
      AvailabilityZone: 
        Fn::Select: 
        - 0
        - Fn::GetAZs: ""        
    
  PrivateSubnetB:
     Type: AWS::EC2::Subnet
     Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PriSubBCidr
      AvailabilityZone: 
        Fn::Select: 
        - 1
        - Fn::GetAZs: ""        
  
  ##############Creating 2 EIPs and 2 IGW in the 2 Public Subents ####################

  EIP1:
   #DependsOn: VPCGatewayAttach  ###https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc
  
  EIP2:
   #DependsOn: VPCGatewayAttach  ###https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html
   Type: AWS::EC2::EIP
   Properties:
      Domain: vpc

  NATGW1:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnetA

  NATGW2:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnetB
      
###############################Creating public Route Tables to associate the public subnets to IGW##############
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref VPC
     
  PublicRoute:
    Type: AWS::EC2::Route
    #DependsOn: GatewayToInternet
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: InternetGateway
  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PrivateRouteTable1:    ##for private subnet1
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref VPC

  PrivateRouteTable2:    ##for private subnet2
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref VPC
  
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGW1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGW2

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable2


####################Creating NACL to allow only http and SSH######################
  
  NACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref VPC
  
  NACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NACL
       RuleNumber: 110
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
  
  NACLInboundRulehttps:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NACL
       RuleNumber: 80
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 443
         To: 443
  NACLInboundRulehttp:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NACL
       RuleNumber: 100
       Protocol: 6  ###TCP
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 80
         To: 80
  NACLInboundRuleEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NACL
       RuleNumber: 90
       Protocol: 6  ###TCP
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 1024
         To: 65535 
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId:
         Ref: NACL
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  
  PubSubnetANACLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PublicSubnetA
       NetworkAclId:
         Ref: NACL

  PubSubnetBNCLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PublicSubnetB
       NetworkAclId:
         Ref: NACL
  
  PriSubnetANCLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PrivateSubnetA
       NetworkAclId:
         Ref: NACL

  PriSubnetBNCLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId:
         Ref: PrivateSubnetB
       NetworkAclId:
         Ref: NACL

Outputs:
  PublicSubnetA:
    Description: Public Subnet A.
    Value: !Ref PublicSubnetA
    Export:
     Name: PublicSubnetA
  PublicSubnetB:
    Description: Public Subnet B.
    Value: !Ref PublicSubnetB
    Export:
     Name: PublicSubnetB
  PrivateSubnetA:
    Description: Private Subnet A.
    Value: !Ref PrivateSubnetA
    Export:
     Name: PrivateSubnetA
  PrivateSubnetB:
    Description: Private Subnet B.
    Value: !Ref PrivateSubnetB
    Export:
     Name: PrivateSubnetB
    
  vpcid:
   Description: VPC ID 
   Value: !Ref VPC
   Export:
     Name: vpcid
  
  VpcCidr:
    Description: VPC CIDR block.
    Value:
      Fn::GetAtt:
        - VPC
        - CidrBlock
    Export:
      Name: VPCCIDR
  